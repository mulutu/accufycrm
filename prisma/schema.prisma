// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  company       String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  chatbots      Chatbot[]
  messages      Message[]
  documents     Document[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chatbot {
  id            String         @id @default(cuid())
  uuid          String         @unique @default(uuid())
  name          String
  description   String?
  logoUrl       String?
  avatarUrl     String?
  websiteUrl    String?
  primaryColor  String         @default("#000000")
  bubbleMessage String         @default("Chat with us!")
  welcomeMessage String        @default("Hello! I'm your AI assistant. How can I help you today?")
  instructions  String?
  isDarkMode    Boolean        @default(false)
  width         Int            @default(400)
  height        Int            @default(600)
  status        String         @default("READY")
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  dataSources   DataSource[]
  conversations Conversation[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documents     Document[]
  knowledgeBase KnowledgeBase[]
}

model DataSource {
  id        String   @id @default(cuid())
  type      String   // website, document, video, etc.
  url       String?
  content   String?  @db.Text
  fileName  String?
  fileType  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatbotId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  sessionId String
  userIp    String?
  country   String?
  device    String?
  browser   String?
  startedAt DateTime  @default(now())
  endedAt   DateTime?
  chatbotId String
  chatbot   Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String       @db.Text
  role           String       // 'user' or 'assistant'
  chatbotId      String
  chatbot        Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String?
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   @db.Text
  description String?
  type        String   // api_key, url, text, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id          String   @id @default(cuid())
  name        String
  content     String   @db.Text
  chatbotId   String
  chatbot     Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  content   String   @db.Text
  source    String   // 'document' or 'website'
  sourceUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatbotId String
  chatbot   Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
}
